---
- name: Get list of jobs
  uri:
    user: admin
    password: "{{ jenkins_admin_pass }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/api/json?tree=jobs[name]"
    return_content: yes
  register: jenkins_jobs
  until: jenkins_jobs.content.find('Please wait while Jenkins is getting ready to work') == -1
  retries: 10
  delay: 5

- name: Check if seed job exists
  set_fact:
    jenkins_seed_job_exists: "{{ jenkins_seed_name in (jenkins_jobs.content|from_json).jobs|map(attribute='name')|list }}"

- name: Create seed job
  uri:
    user: admin
    password: "{{ jenkins_admin_pass }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/createItem?name={{ jenkins_seed_name }}&{{ jenkins_crumb_token }}"
    method: POST
    HEADER_Content-Type: application/xml
    body: "{{ lookup('template', jenkins_seed_template) }}"
  register: jenkins_seed_job_updated
  when: not jenkins_seed_job_exists

- name: Update seed job
  uri:
    user: admin
    password: "{{ jenkins_admin_pass }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/job/{{ jenkins_seed_name }}/config.xml?{{ jenkins_crumb_token }}"
    method: POST
    HEADER_Content-Type: application/xml
    body: "{{ lookup('template', jenkins_seed_template) }}"
  register: jenkins_seed_job_updated
  when: jenkins_seed_job_exists

- name: Run seed job
  uri:
    user: admin
    password: "{{ jenkins_admin_pass }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/job/{{ jenkins_seed_name }}/build?{{ jenkins_crumb_token }}"
    method: POST
    status_code: 201
    timeout: 40
  when: jenkins_seed_job_updated|success

- name: Copy Jenkins Credentials shell script
  sudo: yes
  template: src=credentials.sh.j2 dest="/tmp/credentials.sh" force=yes mode=0755

- name: Run shell script to produce Jenkins credentials
  sudo: yes
  command: sh /tmp/credentials.sh

- name: Jenkins restart..
  sudo: yes
  action: command service jenkins restart

- name: Wait for Jenkins to become available
  wait_for: port=8080

- name: Check if Hello world job exists
  set_fact:
    jenkins_job_name_exists: "{{ jenkins_job_name in (jenkins_jobs.content|from_json).jobs|map(attribute='name')|list }}"



- name: Copy Config xml file to remote jenkins host
  sudo: yes
  template: src=config.xml-jenkins-job dest="/tmp/config.xml-jenkins-job" force=yes mode=0755

- name: Copy Shell script to remote jenkins host
  sudo: yes
  template: src=hello-world-job.sh.j2 dest="/tmp/hello-world-job.sh" force=yes mode=0755

- name: Run script against the Jenkins API to create the hello world Job
  sudo: yes
  command: sh /tmp/hello-world-job.sh



#- name: Create Job for Hello World app
#  uri:
#    user: admin
#    password: "{{ jenkins_admin_pass }}"
#    force_basic_auth: yes
#    url: "http://127.0.0.1:8080/createItem?name=hello-world-job&{{ jenkins_crumb_token }}"
#    method: POST
#    status_code: 201
#    HEADER_Content-Type: application/xml
#    body: "{{ lookup('file', 'config.xml-jenkins-job') }}"
#  register: jenkins_job_name_updated
#  when: not jenkins_job_name_exists

#- name: Run Hello World Job using Curl on Jenkins URI
#  sudo: yes
#  action: command curl -vvv -X POST --basic -u admin:admin -X POST -H "Content-Type:application/xml"  "http://127.0.0.1:8080/job/hello-world-job/build?{{ jenkins_crumb_token }}"

#- name: Run Hello World Job
#  uri:
#    user: admin
#    password: "{{ jenkins_admin_pass }}"
#    force_basic_auth: yes
#    url: "http://127.0.0.1:8080/job/{{ jenkins_job_name }}/build?{{ jenkins_crumb_token }}"
#    method: POST
#    status_code: 201
#    timeout: 1200
#  when: jenkins_job_name_updated|success
